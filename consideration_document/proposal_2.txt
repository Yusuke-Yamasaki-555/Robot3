nodeを分けない
---rosの特徴を生かしきれない
  　--→もったいない

nodeを分ける
---実行用のlaunchファイルを作成が必要
   --→去年の5班のリポジトリを参考にする
---Pub-Sub, serviceなどの導入が必要
   --→去年のプログラムやROS-wikiなどを参考に記述
   
結論(吉越): nodeを分けたほうがいい。多少システムが複雑になるが、rosの機能を有効活用できそう。

node間の通信方法
Pub-Sub, serviceのどちらか
Pub-Subが一般的
<検証>
Pub, Subを使った同期処理
結果: 成功。

<検証>
同一プログラム内でのserviceの複製
結果: 

<検証>
service(actionlib)を使った処理
結果: 


＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
山崎

＜変更案＞

☆manage _ 動作処理 _ 画像処理 _ emotions の３つのnodeに分ける。
　manage.py : client ( actionlib , service )＝main
   - srdf-only : sever ( service )＝srdfのみでの動作指定
   - motion-process ( move-only ) : server ( actionlib )＝ある程度の処理を含んだ動作指定
   - motion-process ( img & move ) : server ( actionlib ) & client ( service )＝画像処理を用いた動作指定
      - img-process : server ( service )

検証＿一つのプログラムからいくつもserverの口を作れるか
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

＝＝＝＝＝
＝actionlibはserviceの強化版。serviceだとserver側の処理完了をclient側は待つことになる。server側の処理が重いとclient側の処理が止まってしまう。
＝　actionlibでは、server側の処理の経過状況がclient側で分かる為、一つ一つの行動がうまくいっているかの確認が出来る。client側でも処理が出来る状態になる。
＝＝＝＝＝

actionlibで関数群を各nodeとして分けてもいいかも。
ただsrdfを読むだけの処理なら、serviceで実装してもいいかも。
この場合、launchファイルだとかで事前にserver側のnodeを全て立ち上げる必要がある。

pub, sub は論外。動作は流れで実行しなければならないから、非同期は無理。画像処理も、引数があってその結果から動作をしないとならないから非同期は無理。
