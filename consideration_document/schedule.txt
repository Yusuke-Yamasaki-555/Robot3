＜スケジュール＞
授業時間合計
11/1 . 11/8  =8h
中間審査　11/15
11/22 , 11/29 , 12/6 , 12/13  =16h
最終発表　12/20 

〜中間発表(10/25)
・山崎：α：モーション(SRDFファイル & 目標座標指定)(事前に決めておく)
・山崎、吉越：α：URDFの勉強

〜中間審査(11/15)＝８ｈ
１＿吉越：α：シュミレーション用モデル(URDF)の作成（棒）
１＿山崎：α：シュミレーション用モデル(URDF)の作成（印）
２＿吉越：2：launchファイル書き換え（モデル作成後）
３＿吉越：12-6：grip.py & cv_grip.py（４：コード書き）
４＿山崎：2：release.py
５＿山崎：2：hit.py
Last＿山崎：2：中間審査資料作成　　　　　計：１２ｈ＋α

〜最終発表(12/20)＝１６ｈ
１＿山崎：4：emotions.py
２＿吉越：12-6：grip.py & cv_grip.py（６：検証＆微調整）
３＿吉越：8：find.py & cv_find.py（２：コード書き(gripからコピペ)、６：検証＆微調整）
４＿吉越：4：check.py & cv_check.py（）
５＿山崎：6：sprinkle.py
６＿山崎(コード書き)、吉越6：manage.py（２：コード書き、４：調整時間）
Last＿山崎：6：README.mdの作成。最終発表資料作成　　　　　　　計：４０ｈ


＜作成物一覧＞
    --manage.py(すべてのpythonファイルの管理を行うpyhonファイル)
        --bow.py(お辞儀)
　      --grip.py(棒を持つ)
            --cv_grip.py(棒を探す、微調整する)
        --find.py(物体を探す)
            --cv_find.py
        --sprinkle.py(振りかぶる)
            以下2つの関数はsprinkle.pyに書く. 
            --not_find()(物体が見つからない)
            --not_reach()(物体に届かない)                                                                
        --hit.py(打つ)
        --check.py(指定の印が倒れたか確認する。すべて倒したか確認する)
            --cv_check.py
        --release.py(棒を離す)
        --gutspose.py(喜ぶ. ガッツポーズでなくてもよい.)
    モーション(SRDFファイル & 目標座標指定)
    シュミレーション用モデル(URDF)
    launchファイルの書き換え
    README.mdの作成


＜工数予測：時間数(48時間＋α)＞
    6：manage.py（２：コード書き、４：調整時間）
    2：bow.py
　  12：grip.py & cv_grip.py（４：コード書き、６：検証＆微調整）
    8：find.py & cv_find.py（２：コード書き(gripからコピペ)、６：検証＆微調整）
    6：sprinkle.py
    2：hit.py
    4：check.py & cv_check.py（）
    2：release.py
    2：gutspose.py
    α：モーション(SRDFファイル & 目標座標指定)(事前に決めておく)
    α：シュミレーション用モデル(URDF)
    2：launchファイル書き換え
    6：README.mdの作成。最終発表資料作成
    2：中間審査資料作成

合計時間：５２時間＋α


＜改善点＞
==========・スケジュールが大雑把すぎる。優先順位を付けて、ガントチャートが右斜め下の坂になるように。
・ROSの知識が浅い。特にNode,Topic,service,ROSとのデータのやり取り。ROSの構造を理解する。
・スライド内容
　==========・全体の説明が雑。nodeに上下関係はないから円の中に含むような表現はおかしい。一つ一つの関係を列挙する。どのようなデータのやり取りなのか。
　・細かな説明が細かすぎる。体現止めで。　　全体の説明から始まって、細かい説明に行くような流れを組まないと分かりづらい。
　==========・プログラムはプログラムと表現する。プログラムファイル、ファイルではだめ。
　==========・どのようなことをするかの説明が足りない。流れをわかりやすく表現する。ソフトウェアの構成の図もわかりやすく。
　・図形はわかりやすくする。わかりやすくするための図形。
　・画像処理で何を見るのかがはっきり明記されていない。上記のことに含む。
　・データのやり取りなのか、プログラムの呼び出し(import)なのかわからない。はっきりさせる。

　　今回のnodeは一個。そこから各pythonのプログラムにアクセスしていく。


＜スライドの流れ＞
・動機(何を実現したいか。なぜそれを作るのか。)
・具体的なロボットの動作
　・全体の流れを説明。何をやるかの説明。漫画で１コマ１コマに分けて表す。
　・一つ一つの動作の説明。ここで愛嬌を実現する動きの説明も行う。
・ソフトウェアの構成案(なるべく具体的に)(全体の説明から個々の説明へ流れるように。)
　・ソフトウェアの全体像・構成の説明。わかりやすい図と文字を同時に使う。
　・nodeの説明とプログラム同士の関係性について説明する。ここてTopicとserviceの説明をする。
　・各プログラムがどのような動作を担っている関数をもっているかを説明する。体現止めで分かりやすく、簡潔に。
　・画像処理のROSとのデータのやり取りについて詳しく説明する。
・スケジュール(ガントチャートで)